



# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö @username –≤ –¢–µ–ª–µ–≥—Ä–∞–º


import logging
import json
import os
import asyncio
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument,
    InputMediaAudio, InputMediaAnimation,
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters,
)

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -------------------------------------------------
BOT_TOKEN = '7781913191:AAGmxczdLZv6g4Vsw6sK_aJvOHEEKMcBX50'            # –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ALLOWED_USERNAMES = {  'SupaShopz', 'SpammBotss' } # –∫–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
STATE_WAIT = 'await_broadcast'      # —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
registered_chats = []               # —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤

# --- —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------------------------
def load_chats():
    global registered_chats
    if os.path.exists('chats.json'):
        with open('chats.json', encoding='utf-8') as f:
            registered_chats = json.load(f)

def save_chats():
    with open('chats.json', 'w', encoding='utf-8') as f:
        json.dump(registered_chats, f, ensure_ascii=False, indent=2)

async def broadcast_text(text, context):
    for c in registered_chats:
        try:
            await context.bot.send_message(c['chat_id'], text)
        except Exception as e:
            logging.error(f"{c['chat_id']}: {e}")

async def broadcast_media(group, context):
    for c in registered_chats:
        try:
            await context.bot.send_media_group(c['chat_id'], group)
        except Exception as e:
            logging.error(f"{c['chat_id']}: {e}")

def make_input(msg, caption=False):
    cap = msg.caption if caption else None
    if msg.photo:
        return InputMediaPhoto(msg.photo[-1].file_id, caption=cap)
    if msg.video:
        return InputMediaVideo(msg.video.file_id, caption=cap)
    if msg.document:
        return InputMediaDocument(msg.document.file_id, caption=cap)
    if msg.audio:
        return InputMediaAudio(msg.audio.file_id, caption=cap)
    if msg.animation:
        return InputMediaAnimation(msg.animation.file_id, caption=cap)
    raise ValueError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞')

# --- –∫–æ–º–∞–Ω–¥—ã ---------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ALLOWED_USERNAMES:
        await update.message.reply_text(
            'Hallo, m√∂chtest du auch so einen Bot? '
            'Schreib mir @SpammBotss, du kannst ihn einen Tag lang kostenlos ausprobieren.'
        )
        return
    registered_chats.clear()
    async for ch in context.bot.get_my_chats():
        registered_chats.append({'chat_id': ch.id, 'title': ch.title or str(ch.id)})
    save_chats()

    kb = [
        [InlineKeyboardButton('üìÇ Chats ansehen', callback_data='view'),
         InlineKeyboardButton('üì§ Nachricht senden', callback_data='send')],
        [InlineKeyboardButton('üõë Verteilung stoppen', callback_data='stop')],
    ]
    await update.message.reply_text('üìã W√§hlen Sie eine Aktion:', reply_markup=InlineKeyboardMarkup(kb))

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('/start ‚Äì –º–µ–Ω—é\n/help ‚Äì –ø–æ–º–æ—â—å')

async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == 'view':
        txt = '\n'.join(f"{c['chat_id']}: {c['title']}" for c in registered_chats) or '‚Äî'
        await q.edit_message_text('–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n' + txt)
    elif q.data == 'send':
        context.user_data[STATE_WAIT] = True
        await q.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –∞–ª—å–±–æ–º –¥–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤).')
    elif q.data == 'stop':
        context.user_data.pop(STATE_WAIT, None)
        await q.edit_message_text('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

# --- –ø—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π ------------------------------------------
async def collector(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(STATE_WAIT):
        return

    msg = update.message
    if not msg.media_group_id:                           # –æ–¥–∏–Ω–æ—á–Ω–æ–µ
        if msg.text or msg.caption:                      # —Ç–µ–∫—Å—Ç
            await broadcast_text(msg.text or msg.caption, context)
        if any([msg.photo, msg.video, msg.document, msg.audio, msg.animation]):  # –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞
            await broadcast_media([make_input(msg, True)], context)
        context.user_data.pop(STATE_WAIT, None)
        return

    # –∞–ª—å–±–æ–º
    album_store = context.user_data.setdefault('albums', {})
    gid = msg.media_group_id
    album_store.setdefault(gid, []).append(msg)

    await asyncio.sleep(1)                               # –∂–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    batch = album_store.pop(gid, [])
    if not batch:
        return
    batch.sort(key=lambda m: m.message_id)
    media = [make_input(m, i == 0) for i, m in enumerate(batch)][:8]  # –º–∞–∫—Å 8
    await broadcast_media(media, context)
    context.user_data.pop(STATE_WAIT, None)

# --- –∑–∞–ø—É—Å–∫ ----------------------------------------------------
def main():
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')
    load_chats()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CallbackQueryHandler(buttons))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, collector))

    app.run_polling()

if __name__ == '__main__':
    main()
